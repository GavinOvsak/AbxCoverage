<html>
<head>
  <title>Abx Coverage</title>
  <script src="/res/js/jquery-2.2.4.js"></script>
  <script src="/res/js/jquery-ui.js"></script>
  <script src="/res/js/popper.min.js"></script>
  <script src="/res/js/bootstrap.min.js"></script>
  <script src="/res/js/lodash.min.js"></script>
  <script src="/res/js/awesomplete.js"></script>
  <script async src="/res/js/lodash.min.js"></script>
  <script src="/res/js/fontawesome.js"></script>
  <script src="/res/js/utilities.js"></script>
  <script src="/data/abxList.js"></script>
  <script src="/data/bugList.js"></script>
  <script src="/data/conditionList.js"></script>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <link rel="icon" type="image/png" href="/favicon.ico" />
  <link rel="apple-touch-icon" href="favicon.ico">
  <link rel="stylesheet" href="/res/css/bootstrap.min.css"/>
  <link rel="stylesheet" href="/res/css/awesomplete.css">
</head>
<body style="user-select: none;">
  <div id="topBar" style="width: 100%; display: inline-block;">
    <span id="titleAndButtons" style="padding-left: 10px;display: inline-block;width: 100%;padding-top: 7px;vertical-align: top;background-color: #0c7bff;color: white;padding-bottom: 5px;">
      <h3 style="display: inline-block;line-height: 35px;position: relative;top: -4px;vertical-align: top;margin-top: 3px;margin-bottom: 0px;margin-right: 10px;" aria-haspopup="true" aria-expanded="true">
        <span id="mainTitle" style="vertical-align: text-top;">
          <a href="/" style="color: white; text-decoration: none;">Antibiotic Coverage</a>
        </span>
      </h3>
      <a href="mailto:ovsak.gavin@gmail.com"><div class="btn btn-light" style="float: right; margin-right: 5px;">Feedback</div></a>
      <span id="loadingTitle" style="margin-left: 10px; position: relative; top: -3px; display: none;"> Loading.. </span>
    </span>
  </div>
  <div id="mainBar" class="bg loading" style="float: left;width: 100%;height: calc(100% - 50px);background-color: white;">
    <!-- <div id="mobileTop" style="width: 100%; background-color: lightgrey; text-align: center; font-size: 21px; display: none;">
      <div class="btn-sm btn btn-light mobileTab" data-type="bug" style="margin-top: 9px;margin-bottom: 5px;float: left;margin-left: 5px;margin-right: 5px;"><i class="fas fa-bug" style="margin-right: 8px;" aria-hidden="true"></i>Bugs</div><div style="display: inline-block;width: calc(100% - 165px);margin-top: 6px;margin-bottom: 5px;">
        <div class="input-group">
          <input id="mixedSearch" type="text" class="form-control" placeholder="Search" aria-label="Recipient's username" aria-describedby="basic-addon2">
          <div id="mixedAddons" class="input-group-append">
            <button class="btn btn-primary routeToggle" data-type="IV" type="button" style="padding-left: 8px; padding-right: 8px;">IV</button>
            <button class="btn btn-primary routeToggle" data-type="PO" type="button" style="padding-left: 8px; padding-right: 8px;">PO</button>
          </div>
        </div>
      </div>
      <div class="btn-sm btn btn-light mobileTab" data-type="abx" style="margin-top: 9px;margin-bottom: 5px;float: left;margin-left: 5px;margin-right: 5px;float: right;"><i class="fas fa-capsules" style="margin-right: 8px;" aria-hidden="true"></i>Abx</div>
    </div> -->
    <div id="bugCol" style="width: 100%;display: inline-block;vertical-align: top;border-right: black solid 1px;padding-bottom: 10px;height: 50%;"> 
      <div id="bugTop" style="width: 100%;background-color: lightgrey;padding: 5px;cursor: pointer;display: inline-block;">
        <i class="fas fa-bug" style="margin-right: 10px;width: 16px;display: inline-block;margin-left: 5px;" aria-hidden="true"></i>
        <span style="display: inline-block; margin-right: 5px;">Bug Targets</span>
        <div style="display: inline-block;width: calc(100% - 203px);max-width: 302px;">
          <input id="bugSearch" class="form-control" placeholder="Search Bugs / Conditions" >
        </div>
        <div id="resetBugs" class="btn btn-light" style="vertical-align: top;">Reset</div>
      </div>
      <style>
        .bigBugBox {
          margin-bottom: 15px;
        }
        .bugRow {
          padding: 6px;
          border-radius: 5px;
          width: 220px;
          margin-bottom: 5px;
          margin-right: 5px;
          cursor: pointer;
        }
        .abxRow {
          width: calc(100% - 5px);
          display: inline-block;
          margin-bottom: 5px;
          background-color: #e8e8e8;
          border-radius: 5px;
          padding: 5px;
          text-align: center;
          cursor: pointer;
        }
      </style>
      <div id="bugList" style="overflow-y: scroll;height: calc(100% - 44px);flex-direction: column;flex-wrap: wrap;padding-top: 5px;padding-left: 5px;align-content: flex-start;display: flex;"></div>
    </div><div id="abxCol" style="width: 34%; display: none; vertical-align: top;"> 
      <div id="abxTop" style="width: 100%;background-color: lightgrey;padding: 5px 0px;cursor: pointer;display: inline-block;">
        <i class="fas fa-capsules" style="margin-right: 10px;width: 14px;display: inline-block;margin-left: 10px;" aria-hidden="true"></i>
        <span style="display: inline-block;margin-right: 8px;">Abx</span>
        <div style="display: inline-block;width: calc(100% - 115px);">
          <div class="input-group">
            <input id="abxSearch" type="text" class="form-control" placeholder="Search">
            <div class="input-group-append">
              <button class="btn btn-primary routeToggle" data-type="IV" type="button" style="padding-left: 8px; padding-right: 8px;">IV</button>
              <button class="btn btn-primary routeToggle" data-type="PO" type="button" style="padding-left: 8px; padding-right: 8px;">PO</button>
            </div>
          </div>
        </div>
        <i id="contraToggle" class="fas fa-filter" style="padding: 5px;"></i>
      </div>
      <div id="abxList" style="overflow-y: scroll;height: calc(100% - 296px);padding-left: 5px;padding-top: 5px;">
      </div>
    </div>
  </div>

  <div id="contraModal" data-keyboard="false" class="modal fade" role="dialog" style="overflow: hidden">
    <div class="modal-dialog modal-lg" style="overflow-y: initial !important;">
      <div class="modal-content">
        <div class="modal-header" style="display: inline-block;">
          <i class="fas fa-biohazard" style="margin-right: 10px;width: 14px;display: inline-block;" aria-hidden="true"></i>
          <span style="display: inline-block;margin-right: 3px;">Contraindications</span>
          <div style="display: inline-block;width: calc(100% - 200px);">
            <input id="contraSearch" type="text" class="form-control" placeholder="Search to Add">
          </div>
          <span data-dismiss="modal" class="fas fa-xmark" style="font-size: 24px;float: right;cursor: pointer;margin-top: 5px;margin-right: 5px;" aria-hidden="true"></span>
        </div>
        <div id="contraList" class="modal-body" style="display: inline-block; padding-top: 20px; width: 100%; overflow-y: scroll; max-height: 722px;">
          <div class="abxRow">Pregnant</div>
          <div class="abxRow">Pregnant</div>
          <div class="abxRow">Pregnant</div>
        </div>
      </div>
    </div>
  </div>

  <script>

    // var pane = 'bug';
    var panes = 'three';
    var focusPane = 'bug';

    var openBugGroups = {};
    var targetBugs = {};
    var abxRoutes = { 'IV': true, 'PO': false };

    var abxResults = [];
    var selectedContraList = [];

    var selectedCondition = null;
    var selectedAbx = null;
    var pinnedAbx = {};

    var bugBox = null;
    var abxBox = null;
    var contraBox = null;
    // var mixedBox = null;

    var getProp = function(that, prop) {
      return $(that).closest('[data-'+prop+']').attr('data-'+prop);
    };

    var setMaxHeight = function(element) {
      var headerBox = $(element+' .modal-header').length != 0 ? $(element+' .modal-header')[0].getBoundingClientRect() : {height: 0, top: 0};
      var footerBox = $(element+' .modal-footer').length != 0 ? $(element+' .modal-footer')[0].getBoundingClientRect() : {height: 20};
      var maxHeight = $(element+'').height() - (Math.max(headerBox.top, 10) + headerBox.height + footerBox.height + 20);
      $(element+' .modal-body').css('max-height', maxHeight);
    };

    var bugJumps = {};
    var bugPaths = {};
    var abxJumps = {};
    var shownBugs = {};

    var addToBugList = function(list, outlist, stack, shown) {
      for (var key in list) {
        bugJumps[key] = list[key];
        if (shown) shownBugs[key] = true;
        var newStack = [key].concat(clone(stack));
        bugPaths[key] = newStack;
        var selectedLevel = newStack.find(function(bugLevel) {
          return targetBugs[bugLevel] != null;
        });
        if (typeof list[key] == 'object') {
          var isOpen = openBugGroups[key] == null ? false : !!openBugGroups[key];
          outlist.push({name: key, type: (isOpen ? 'open' : 'closed') + ' group', stack: newStack, percent: targetBugs[selectedLevel], shown: shown });
          addToBugList(list[key], outlist, newStack, shown && isOpen);
        } else {
          outlist.push({name: key, type: 'normal', stack: newStack, percent: targetBugs[selectedLevel], shown: shown });
        }
      }
    };

    var refresh = function() {
      var bugItemList = [];
      shownBugs = {};
      addToBugList(bugList, bugItemList, [], true);
      for (var key in targetBugs) if (shownBugs[key] == null) delete targetBugs[key];

      var anySelected = !isEmpty(targetBugs);

      var getCoveragePercent = function(bugItem, chosenAbxList) {
        if (!empty(bugJumps[bugItem.name])) { // Average over subtypes
          return _.mean(keys(bugJumps[bugItem.name]).map(function(subBug) {
            return getCoveragePercent({
              name: subBug,
              stack: clone(bugItem.stack).concat(subBug)
            }, chosenAbxList);
          }));
        } else {
          var maxCoverage = 0;
          (chosenAbxList || []).filter(function(n) {
            return n != null;
          }).some(function(abxName) {
            var abxObj = abxJumps[abxName];
            var abxCoverageLevel = bugPaths[bugItem.name].find(function(bugLevel) {
              return abxObj.coverage[bugLevel] >= 0;
            });
            if (abxCoverageLevel != null) maxCoverage = Math.max(abxObj.coverage[abxCoverageLevel], maxCoverage);
          });
          return maxCoverage * 100;
        }
      };

      $('#bugList').empty(); 
      var bugListHTML = '';
      bugItemList.map(function(item, i) {
        if (!item.shown) return;
        var coveredByChosen = getCoveragePercent(item, [selectedAbx])
        var coveredByAll = Math.max(coveredByChosen, getCoveragePercent(item, keys(pinnedAbx)));
        // Show fractional coverage when group contains things that are covered

        if (item.stack.length == 1) {
          bugListHTML += (i != 0 ? '</div>' : '') + '<div style="display: inline-block; vertical-align: top;" class="bigBugBox">';
        }

        var bgColor = item.type == 'normal' ? 'lightgrey' : '#e8e8e8';
        var background = coveredByAll == 0 ? 'background-color: '+bgColor+';' :
          'background: linear-gradient(to right, '+
            '#75a3ff '+coveredByChosen+'%, #65d165 '+coveredByChosen+'%,'+
            '#65d165 '+coveredByAll+'%, '+bgColor+' '+coveredByAll+'%);'

          bugListHTML += ''+
        // $('#bugList').append($(''+
`<div class="bugRow${item.type == 'normal' ? ' bugNonGroup' : ' bugGroup'}" data-key="${item.name}" style="margin-left: ${(item.stack.length-1) * 10}px;${background}">
  <div class="bugTarget" data-percent="${item.percent == null ? 0 : item.percent}" style="float: right;cursor: pointer;padding: 5px;margin-right: 0px;">
    ${(item.percent != null && item.percent != 1) ? `<svg height="15" width="15" viewBox="0 0 20 20"><circle r="5" cx="10" cy="10" fill="transparent" stroke="#0c7bff" stroke-width="10" stroke-dasharray="calc(${Math.round(item.percent * 100)} * 31.4 / 100) 31.4"></circle></svg>` :
    `<input type="checkbox" style="height: 16px; width: 16px; cursor: pointer;" ${item.percent != null ? 'checked' : ''}>`}
  </div>
  ${item.type == 'normal' ? '' : `<i class="fas fa-caret-${item.type == 'open group' ? 'down': 'right'}" style="margin-right: 5px;" aria-hidden="true"></i>`}
  <span>${item.name}</span>
</div>`;//));
      });
      $('#bugList').append($(bugListHTML + '</div>'));


      $('.bugGroup').unbind('click').click(function(e) {
        var key = getProp(this, 'key');
        openBugGroups[key] = !(openBugGroups[key] == null ? false : openBugGroups[key]);
        refresh();
      });

      $('#resetBugs').unbind('click').click(function() {
        targetBugs = {};
        openBugGroups = {};
        refresh();
      });

      var toggleBug = function(bug, level) {
        var wasTargetted = false;
        bugPaths[bug].map(function(name) {
          if (targetBugs[name] != null) {
            wasTargetted = true;
            delete targetBugs[name];
          }
        });
        if (!wasTargetted) targetBugs[bug] = level;
        refresh();
        var nonPinnedAbx = abxResults.filter(function(n) {
          return pinnedAbx[n.abx.name] == null && (n.abx.cost == null || n.abx.cost == '$');
        });
        if (nonPinnedAbx.length > 0) {
          selectedAbx = nonPinnedAbx[0].abx.name; 
          refresh();
        }
      }
      $('.bugNonGroup').unbind('click').on('click', function(e) {
        var key = getProp(this, 'key');
        toggleBug(key, 1);
      });

      $('.bugTarget').unbind('click').on('click', function(e) {
        var key = getProp(this, 'key');
        e.stopPropagation();
        toggleBug(key, 1);
      });

      var targetBugList = bugItemList.filter(function(item) {
        return item.type == 'normal' && item.percent != null;
      });
      var currentCoverage = {};
      targetBugList.map(function(bugItem) {
        var maxCoverage = 0;
        keys(pinnedAbx).some(function(abxName) {
          var abxObj = abxJumps[abxName];
          var abxCoverageLevel = bugPaths[bugItem.name].find(function(bugLevel) {
            return abxObj.coverage[bugLevel] >= 0;
          });
          if (abxCoverageLevel != null) maxCoverage = Math.max(abxObj.coverage[abxCoverageLevel], maxCoverage);
        });
        currentCoverage[bugItem.name] = maxCoverage;
      });
      
      abxResults = abxList.map(function(abx) {
        if (selectedContraList.some(function(contraName) {
          return (abx.contra || []).indexOf(contraName) >= 0;
        })) return { coverage: [] }; // Avoid contra
        var adminTypes = abx.admin.split(',');
        if (adminTypes.every(function(route) {
          return !abxRoutes[route];
        })) return { coverage: [] }; // No acceptable route

        var generalCoverage = {};
        bugItemList.filter(function(item) {
          return item.type == 'normal';
        }).map(function(bugItem) {
          var abxCoverageLevel = bugItem.stack.find(function(bugLevel) {
            return abx.coverage[bugLevel] >= 0;
          });
          generalCoverage[bugItem.name] = abxCoverageLevel != null ? abx.coverage[abxCoverageLevel] : 0;
        });

        var specificCoverage = {};
        targetBugList.map(function(bugItem) {
          var abxCoverageLevel = bugPaths[bugItem.name].find(function(bugLevel) {
            return abx.coverage[bugLevel] >= 0;
          });
          specificCoverage[bugItem.name] = abxCoverageLevel != null ? abx.coverage[abxCoverageLevel] : 0;
        });

        return { abx: abx, generalCoverage: generalCoverage, specificCoverage: specificCoverage }
      }).filter(function(data) {
        return data.abx != null && (keys(data.specificCoverage).some(function(coverName) {
          return currentCoverage[coverName] == null || data.specificCoverage[coverName] > currentCoverage[coverName];
        }) || !!pinnedAbx[data.abx.name]);
      });

      var anyRemoved = false;
      keys(pinnedAbx).concat([selectedAbx]).map(function(abxName) {
        if (abxName != null && abxResults.every(function(data) {
          return data.abx.name != abxName;
        })) {
          if (selectedAbx == abxName && !abxBox.opened) {
            selectedAbx = null;
            anyRemoved = true;
          }
          if (pinnedAbx[abxName] != null) {
            delete pinnedAbx[abxName];
            anyRemoved = true;
          }
        }
      });
      if (anyRemoved) return refresh();

      $('#abxList').empty();
      abxResults = _.orderBy(abxResults, [function(data) {
        return !!pinnedAbx[data.abx.name] ? -1 : 0;
      }, function(data) {
        // Sort by the weighted added benefit to the targetBugs
        var addedWeightedBenefit = 0;
        var maxSpecificCoverage = 0;
        var targetBugNames = {};
        targetBugList.map(function(bugItem) {
          var targetBugName = bugItem.stack.find(function(bugName) {
            return targetBugs[bugName] != null;
          });
          targetBugNames[targetBugName] = true;
          var weight = targetBugs[targetBugName];
          var currentLevel = currentCoverage[bugItem.name] == null ? 0 : currentCoverage[bugItem.name];
          maxSpecificCoverage += weight * (1 - currentLevel);
          var addedBenefit = data.specificCoverage[bugItem.name] == null ? 0 : Math.max(0, data.specificCoverage[bugItem.name] - currentLevel);
          if (addedBenefit > 0) addedWeightedBenefit += weight * addedBenefit;
        });

        var nonTargetMax = 0;
        var nonTargetOverlap = 0;
        for (var bugName in data.generalCoverage) {
          if (targetBugNames[bugName] == null) {
            nonTargetOverlap += data.generalCoverage[bugName];
            nonTargetMax += 1;
          }
        }

        // if (data.abx.name == 'Ertapenem') debugger;
        return -1 * (addedWeightedBenefit/maxSpecificCoverage) + (nonTargetOverlap / nonTargetMax) / 2;
        // return -data.coverage.filter(function(name) {
        //   return currentCoverage.indexOf(name) == -1;
        // }).length;
      }, function(data) { // Discourage broad spectrum drugs if no added benefit
        return _.sum(_.values(data.generalCoverage));
      }]);
      abxResults.map(function(data) {
        // background-color: #0c7bff; color: white;
        $('#abxList').append($('<div data-name="'+data.abx.name+'" class="abxRow" style="'+(selectedAbx == data.abx.name ? 'background-color: #75a3ff;' : !!pinnedAbx[data.abx.name] ? 'background-color: #65d165' : '')+'">'+
          data.abx.name+(data.abx.cost != null ? ' ('+data.abx.cost+')' : '')+
          '<i class="'+(!!pinnedAbx[data.abx.name] ? 'fas' : 'far')+' fa-bookmark saveAbx" aria-hidden="true" style="float: right;padding: 5px; color: black"></i>'+
        '</div>'));
      });

      // Ideally would show a circle of how much coverage each has

      $('.abxRow').unbind('click').click(function() {
        var name = getProp(this, 'name');
        if (selectedAbx == name) selectedAbx = null;
        else selectedAbx = name;
        refresh();
      });

      $('.saveAbx').unbind('click').click(function(e) {
        var name = getProp(this, 'name');
        if (pinnedAbx[name] != null) delete pinnedAbx[name];
        else pinnedAbx[name] = true;
        selectedAbx = null;
        e.stopPropagation();
        refresh();
      });

      var contraList = {};
      abxList.map(function(abx) {
        (abx.contra || []).map(function(contra) {
          contraList[contra] = true;
        });
      });

      if (contraBox != null) {
        contraBox.list = keys(contraList).filter(function(contraName) {
          return selectedContraList.indexOf(contraName) == -1;
        });
      }

      $('#contraList').empty();
      selectedContraList.map(function(contra) {
        $('#contraList').append($('<div data-type="'+contra+'" class="abxRow removeContra">'+contra+'<i class="fa-solid fa-xmark" style="float: right; padding: 5px;"></i></div>'));
      });

      $('#contraToggle').css('color', selectedContraList.length == 0 ? '': '#007bff')

      $('.removeContra').unbind('click').click(function() {
        var type = getProp(this, 'type');
        selectedContraList = selectedContraList.filter(function(n) {
          return n != type;
        });
        refresh();
      });
    };

    var updateLayout = function() {
      var width = $(document).innerWidth();
      var height = $(document).innerHeight();

      var oldPanes = panes;
      panes = width > 615 ? 'two' : 'one';
      if (panes != oldPanes) refresh();

      // $('#mobileTop').toggle(panes == 'one');
      $('#bugCol, #abxCol, #bugTop, #abxTop').css('display', 'inline-block');//.css('display', panes != 'one' ? 'inline-block' : 'none');
      if (panes == 'two') { // Two Pane
        $('#bugCol').css('width', 'calc(100% - 335px)').css('height', '100%')
        $('#abxCol').css('width', '335px').css('height', '100%')
        $('#bugList, #abxList').css('height', 'calc(100% - 44px)');
      } else if (panes == 'one') { // One Pane

        if (height < 500) { // Only focus on one. Looks like keyboard shrunk the view.
          $('#bugList, #abxList').css('height', 'calc(100% - 44px)');
          $('#abxCol, #bugCol').css('width', '100%').css('height', '100%');
          if (focusPane == 'bug') $('#abxCol, abxList').hide();
          else if (focusPane == 'abx') $('#bugCol, bugList').hide();

        } else {

          $('#bugCol, #abxCol').css('width', '100%').css('height', '50%')
          $('#bugList, #abxList').css('height', 'calc(100% - 44px)');

        }
        // $('#abxList').css('height', 'calc(100% - 215px)');

        // $('#bugCol, #abxCol').css('width', '100%').css('height', 'calc(100% - 49px)')
        // $('#bugCol').toggle(pane == 'bug');
        // $('#abxCol').toggle(pane == 'abx');
        // $('#bugList').css('height', '100%');
        // $('#abxList').css('height', 'calc(100% - 167px)');
      }

      // $('#mixedAddons').toggle(pane == 'abx');
      // $('#mixedSearch').parent().css('width', pane == 'abx' ? 'calc(100% - 72px)' : '100%');
      // $('#mixedSearch').attr('placeholder', pane == 'abx' ? 'Search Antibiotics' : 'Search Bugs / Conditions');

      // if (panes == 'one') {
      //   if (pane == 'abx') {
      //     mixedBox.list = abxList.filter(function(abx) {
      //       return abx.admin.split(',').some(function(route) {
      //         return !!abxRoutes[route];
      //       });
      //     });;
      //   } else if (pane == 'bug') {
      //     var bugSearchList = [];
      //     addToBugList(bugList, bugSearchList, [], true);
      //     mixedBox.list = bugSearchList.concat(conditionList);
      //   }
      // }

      if (abxBox != null) {
        abxBox.list = abxList.filter(function(abx) {
          return abx.admin.split(',').some(function(route) {
            return !!abxRoutes[route];
          });
        });
      }

      // $('.mobileTab').removeClass('btn-secondary').addClass('btn-light').unbind('click').click(function() {
      //   pane = getProp(this, 'type');
      //   refresh();
      //   updateLayout();
      // });
      // $('.mobileTab[data-type="'+pane+'"]').addClass('btn-secondary').removeClass('btn-light')
      // $('#bodyMain').css('height', panes == 'one' ? '100%' : 'calc(100% - 55px)');

      $('.routeToggle').removeClass('btn-primary').addClass('btn-light').unbind('click').click(function() {
        var type = getProp(this, 'type');
        abxRoutes[type] = !abxRoutes[type];
        refresh();
        updateLayout();
      });
      for (var route in abxRoutes) {
        if (!!abxRoutes[route]) $('.routeToggle[data-type="'+route+'"]').addClass('btn-primary').removeClass('btn-light')
      }
    };

    $(window).on('resize', function() {
      updateLayout();
    });

    $(function() {

      var showBug = function(value) {
        var includes = value.includes || {};
        if (value.includes == null) includes[value.name] = 1;
        else {
          openBugGroups = {};
          targetBugs = {};
        }
        keys(includes).map(function(bugName) {
          bugPaths[bugName].slice(1).map(function(parent) {
            openBugGroups[parent] = true;
          });
          targetBugs[bugName] = includes[bugName];
        });
        refresh();
        var nonPinnedAbx = abxResults.filter(function(n) {
          return pinnedAbx[n.abx.name] == null && (n.abx.cost == null || n.abx.cost == '$');
        });
        if (nonPinnedAbx.length > 0) {
          selectedAbx = nonPinnedAbx[0].abx.name; 
          refresh();
        }
      };

      $('#bugSearch').unbind('focus').on('focus', function() {
        focusPane = 'bug';
        console.log('focused on ', focusPane);
      });

      // Combination of bugs and conditions
      bugBox = new Awesomplete($('#bugSearch')[0], {
        list: [], minChars: 0, autoFirst: true, maxItems: 8,
        data: function(item) {
          return { label: item.name, value: item };
        }
      });
      bugBox.container.addEventListener("awesomplete-selectcomplete", function(data) {
        $('#bugSearch').val('');
        var value = data.text.value;
        showBug(value);
      });

      var bugSearchList = [];
      addToBugList(bugList, bugSearchList, [], true);
      bugBox.list = bugSearchList.concat(conditionList);;

      $('#abxSearch').unbind('focus').on('focus', function() {
        focusPane = 'abx';
        console.log('focused on ', focusPane);
      });

      abxBox = new Awesomplete($('#abxSearch')[0], {
        list: [], minChars: 0, autoFirst: true, maxItems: 8,
        data: function(item) {
          return { label: item.name, value: item };
        }
      });
      abxBox.container.addEventListener("awesomplete-selectcomplete", function(data) {
        $('#abxSearch').val('');
        var value = data.text.value;
        pinnedAbx[value.name] = true;
        selectedAbx = null;
        refresh();
      });
      abxBox.container.addEventListener("awesomplete-highlight", function(data) {
        var value = data.text.value;
        selectedAbx = value.name;
        refresh();
      });

      abxList.map(function(abxObj) {
        abxJumps[abxObj.name] = abxObj;
      });

      contraBox = new Awesomplete($('#contraSearch')[0], {
        list: [], minChars: 0, autoFirst: true, maxItems: 8,
        data: function(item) {
          return { label: item.label, value: item };
        }
      });
      $('#contraSearch').click(function() {
        contraBox.evaluate();
      });

      contraBox.container.addEventListener("awesomplete-selectcomplete", function(data) {
        $('#contraSearch').val('');
        var value = data.text.value;
        if (selectedContraList.indexOf(value) == -1) selectedContraList.push(value);
        refresh();
      });

      $('#bugSearch, #contraSearch').parent().css('width', '100%');
      $('#abxSearch').parent().css('width', 'calc(100% - 72px)');

      // mixedBox = new Awesomplete($('#mixedSearch')[0], {
      //   list: [], minChars: 0, autoFirst: true, maxItems: 8,
      //   data: function(item) {
      //     return { label: item.name, value: item };
      //   }
      // });
      // mixedBox.container.addEventListener("awesomplete-selectcomplete", function(data) {
      //   $('#mixedSearch').val('');
      //   var value = data.text.value;
      //   if (pane == 'abx') {
      //     pinnedAbx[value.name] = true;
      //     selectedAbx = null;
      //   } else if (pane == 'bug') {
      //     showBug(value);
      //   }
      //   refresh();
      // });
      // $('#mixedSearch').parent().css('font-size','16px');

      $('#contraToggle').unbind('click').click(function() {
        $('#contraModal').modal({ show: true });
        setTimeout(function() {
          setMaxHeight('#contraModal');
        }, 200);
      });

      $('[data-toggle="tooltip"]').tooltip();

      $(document).keydown(function(e){
        if (e.which == 40) { // Down
          if (selectedAbx != null) {
            var newIndex = abxResults.findIndex(function(data) {
              return data.abx.name == selectedAbx;
            }) + 1;
            if (abxResults[newIndex] != null) selectedAbx = abxResults[newIndex].abx.name;
            refresh();
          }
          return false;
        } else if (e.which == 38) { // Up
          if (selectedAbx != null) {
            var newIndex = abxResults.findIndex(function(data) {
              return data.abx.name == selectedAbx;
            }) - 1;
            if (abxResults[newIndex] != null) selectedAbx = abxResults[newIndex].abx.name;
            refresh();
          }
          return false;
        }
      }); 

      // $('#surgerySearch, #blockSearch').parent().css('width', 'calc(100% - 10px)');
      // $('#surgerySearch, #blockSearch').parent().find('ul').css('margin-left', '5px');

      updateLayout();
      refresh();
    });
  </script>
</body>
</html>